syntax = "proto2";

import "brewblox.proto";

enum ControlboxOpcode {
  CBOX_OPCODE_NONE = 0;
  CBOX_OPCODE_READ_OBJECT = 1;
  CBOX_OPCODE_WRITE_OBJECT = 2;
  CBOX_OPCODE_CREATE_OBJECT = 3;
  CBOX_OPCODE_DELETE_OBJECT = 4;
  CBOX_OPCODE_LIST_OBJECTS = 5;
  CBOX_OPCODE_READ_STORED_OBJECT = 6;
  CBOX_OPCODE_LIST_STORED_OBJECTS = 7;
  CBOX_OPCODE_CLEAR_OBJECTS = 8;
  CBOX_OPCODE_REBOOT = 9;
  CBOX_OPCODE_FACTORY_RESET = 10;
  CBOX_OPCODE_LIST_COMPATIBLE_OBJECTS = 11;
  CBOX_OPCODE_DISCOVER_OBJECTS = 12;
  CBOX_OPCODE_REMOTE_PROCEDURE = 13;
  CBOX_OPCODE_FIRMWARE_UPDATE = 100;
}

enum ControlboxErrorCode {
  CBOX_ERR_OK = 0;
  CBOX_ERR_UNKNOWN_ERROR = 1;

  // object creation
  CBOX_ERR_INSUFFICIENT_HEAP = 4;

  // generic stream errors
  CBOX_ERR_STREAM_ERROR_UNSPECIFIED = 8;
  CBOX_ERR_OUTPUT_STREAM_WRITE_ERROR = 9;
  CBOX_ERR_INPUT_STREAM_READ_ERROR = 10;
  CBOX_ERR_INPUT_STREAM_DECODING_ERROR = 11;
  CBOX_ERR_OUTPUT_STREAM_ENCODING_ERROR = 12;

  // storage errors
  CBOX_ERR_INSUFFICIENT_PERSISTENT_STORAGE = 16;
  CBOX_ERR_PERSISTED_OBJECT_NOT_FOUND = 17;
  CBOX_ERR_INVALID_PERSISTED_BLOCK_TYPE = 18;
  CBOX_ERR_COULD_NOT_READ_PERSISTED_BLOCK_SIZE = 19;
  CBOX_ERR_PERSISTED_BLOCK_STREAM_ERROR = 20;
  CBOX_ERR_PERSISTED_STORAGE_WRITE_ERROR = 21;
  CBOX_ERR_CRC_ERROR_IN_STORED_OBJECT = 22;

  // invalid actions
  CBOX_ERR_OBJECT_NOT_WRITABLE = 32;
  CBOX_ERR_OBJECT_NOT_READABLE = 33;
  CBOX_ERR_OBJECT_NOT_CREATABLE = 34;
  CBOX_ERR_OBJECT_NOT_DELETABLE = 35;

  // invalid parameters
  CBOX_ERR_INVALID_COMMAND = 63;
  CBOX_ERR_INVALID_OBJECT_ID = 64;
  CBOX_ERR_INVALID_OBJECT_TYPE = 65;
  CBOX_ERR_INVALID_OBJECT_GROUPS = 66;
  CBOX_ERR_CRC_ERROR_IN_COMMAND = 67;
  CBOX_ERR_OBJECT_DATA_NOT_ACCEPTED = 68;

  // freak events that should not be possible
  CBOX_ERR_WRITE_TO_INACTIVE_OBJECT = 200;
}

enum ControlboxPayloadType {
  CBOX_PAYLOAD_NONE = 0;
  CBOX_PAYLOAD_BLOCK_DATA = 1;
  CBOX_PAYLOAD_PERSISTENT_BLOCK_DATA = 2;
  CBOX_PAYLOAD_PROCEDURE = 3;
  CBOX_PAYLOAD_EVENT = 4;
}

message ControlboxPayload {
  optional uint32 blockId = 1;
  optional BrewBloxTypes.BlockType blockType = 2;
  optional ControlboxPayloadType payloadType = 3;
  optional bytes data = 4;
}

message ControlboxRequest {
  optional ControlboxOpcode opcode = 2;
  optional ControlboxPayload payload = 3;
}

message ControlboxResponse {
  optional ControlboxErrorCode error = 2;
  repeated ControlboxPayload payload = 3;
}
