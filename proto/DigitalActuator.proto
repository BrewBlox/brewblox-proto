syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";
import "Constraints.proto";
import "IoArray.proto";
import "Claims.proto";

package blox.DigitalActuator;

message Block {
  option (brewblox.msg).objtype = DigitalActuator;
  option (brewblox.msg).impl = ActuatorDigitalInterface;
  option (brewblox.msg).impl = StoredDigitalInterface;
  option (brewblox.msg).impl = ClaimableInterface;
  option (brewblox.msg).impl = IoDriverInterface;

  uint32 hwDevice = 1 [
    (brewblox.field).objtype = IoArrayInterface,
    (nanopb).int_size = IS_16
  ];
  uint32 channel = 2 [ (nanopb).int_size = IS_8 ];

  IoArray.DigitalState storedState = 11 [ (brewblox.field).logged = true ];
  IoArray.DigitalState desiredState = 6
      [ (brewblox.field).logged = true, (brewblox.field).readonly = true ];
  IoArray.DigitalState state = 3
      [ (brewblox.field).logged = true, (brewblox.field).readonly = true ];

  bool invert = 4;
  Constraints.DeprecatedDigitalConstraints constrainedBy = 5;
  Constraints.DigitalConstraints constraints = 13;

  IoArray.TransitionDurationPreset transitionDurationPreset = 7;
  uint32 transitionDurationSetting = 8
      [ (brewblox.field).unit = Second, (brewblox.field).scale = 1000 ];
  uint32 transitionDurationValue = 9 [
    (brewblox.field).unit = Second,
    (brewblox.field).scale = 1000,
    (brewblox.field).readonly = true
  ];

  uint32 claimedBy = 10 [
    (brewblox.field).objtype = Any,
    (brewblox.field).readonly = true,
    (nanopb).int_size = IS_16
  ];
  Claims.SettingMode settingMode = 12;
}
