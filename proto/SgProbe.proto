syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";

package blox.SgProbe;

enum FilterChoice {
  FILTER_NONE = 0;
  FILTER_3s = 1;
  FILTER_10s = 2;
  FILTER_20s = 3;
  FILTER_40s = 4;
  FILTER_2m = 5;
  FILTER_6m = 6;
}

enum SgFilterChoice {
  SG_FILTER_20s = 0;
  SG_FILTER_2m = 1;
  SG_FILTER_7m = 2;
  SG_FILTER_15m = 3;
  SG_FILTER_45m = 4;
  SG_FILTER_1h30 = 5;
  SG_FILTER_3h = 6;
}

message Block {
  uint32 probeConnectorId = 1
      [ (brewblox.field).objtype = ProbeConnector, (nanopb).int_size = IS_16 ];
  uint32 probeConnectorSlot = 2 [ (nanopb).int_size = IS_8 ];
  bool connected = 3 [ (brewblox.field).logged = true ];

  sint32 pressure1 = 4 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 pressure2 = 5 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 pressure1Filtered = 6 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 pressure2Filtered = 7 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 pressureDiff = 8 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 pressureDiffFiltered = 9 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 tempRtd1 = 10 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 tempRtd2 = 12 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 tempAdc1 = 13 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 tempAdc2 = 14 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 bridge1 = 15 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 bridge2 = 16 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  FilterChoice filter = 17;
  sint32 raw1 = 18 [
    (brewblox.field).logged = true,
    (nanopb).int_size = IS_32,
    (brewblox.field).scale = 4096,
    (brewblox.field).readonly = true
  ];
  sint32 raw2 = 19 [
    (brewblox.field).logged = true,
    (nanopb).int_size = IS_32,
    (brewblox.field).scale = 4096,
    (brewblox.field).readonly = true
  ];
  sint32 raw1Filtered = 20 [
    (brewblox.field).logged = true,
    (nanopb).int_size = IS_32,
    (brewblox.field).scale = 4096,
    (brewblox.field).readonly = true
  ];
  sint32 raw2Filtered = 21 [
    (brewblox.field).logged = true,
    (nanopb).int_size = IS_32,
    (brewblox.field).scale = 4096,
    (brewblox.field).readonly = true
  ];
  sint32 offset1 = 22
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 4096 ];
  sint32 offset2 = 23
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 4096 ];
  sint32 scale1 = 24
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 1048576 ];
  sint32 scale2 = 25
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 1048576 ];
  sint32 referenceDiff = 26
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 4096 ];
  sint32 density = 27 [
    (nanopb).int_size = IS_32,
    (brewblox.field).scale = 4096,
    (brewblox.field).logged = true
  ];
  sint32 densityFilt = 28 [
    (nanopb).int_size = IS_32,
    (brewblox.field).scale = 4096,
    (brewblox.field).logged = true
  ];

  SgFilterChoice sgFilter = 29;

  sint32 calibrationBridge1 = 32 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  sint32 calibrationBridge2 = 33 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  sint32 calibrateAir = 34 [
    (brewblox.field).unit = MilliBar,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  sint32 calibrateTemp = 35 [
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  sint32 tempRtdOffset1 = 36 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
  sint32 tempRtdOffset2 = 37 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
  sint32 tempAdcOffset1 = 38 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
  sint32 tempAdcOffset2 = 39 [
    (brewblox.field).logged = true,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  sint32 dTemp1 = 40
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 1048576 ];
  sint32 dTemp2 = 41
      [ (nanopb).int_size = IS_32, (brewblox.field).scale = 1048576 ];

  sint32 chemVoltage = 42 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = Volt,
    (brewblox.field).scale = 4096000,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
}

// message CalibrateAir {
//   option (brewblox.msg).objtype = SgProbe;
//   option (brewblox.msg).subtype = 1;
//   sint32 pressure = 1 [
//     (brewblox.field).unit = MilliBar,
//     (brewblox.field).scale = 4096,
//     (nanopb).int_size = IS_32
//   ];
// }
