syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";
import "Claims.proto";

package blox.SetpointSensorPair;

enum FilterChoice {
  FILTER_NONE = 0;
  FILTER_15s = 1;
  FILTER_45s = 2;
  FILTER_90s = 3;
  FILTER_3m = 4;
  FILTER_10m = 5;
  FILTER_30m = 6;
}

message Block {
  option (brewblox.msg).objtype = SetpointSensorPair;
  option (brewblox.msg).impl = ProcessValueInterface;
  option (brewblox.msg).impl = StoredTemperatureInterface;
  option (brewblox.msg).impl = SetpointSensorPairInterface;
  option (brewblox.msg).impl = EnablerInterface;
  option (brewblox.msg).impl = ClaimableInterface;

  bool enabled = 7;

  uint32 sensorId = 2 [
    (brewblox.field).objtype = TempSensorInterface,
    (nanopb).int_size = IS_16
  ];

  sint32 storedSetting = 8 [
    (brewblox.field).logged = false,
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
  sint32 setting = 5 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 value = 6 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];
  sint32 valueUnfiltered = 11 [
    (brewblox.field).logged = true,
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true
  ];

  FilterChoice filter = 9;
  sint32 filterThreshold = 10 [
    (brewblox.field).unit = DeltaCelsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  bool resetFilter = 12;

  uint32 claimedBy = 13 [
    (brewblox.field).objtype = Any,
    (brewblox.field).readonly = true,
    (nanopb).int_size = IS_16
  ];
  Claims.SettingMode settingMode = 14;

  // Renamed field
  bool settingEnabled = 90
      [ (brewblox.field).ignored = true, (nanopb).type = FT_IGNORE ];
}
