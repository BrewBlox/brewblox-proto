syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";
import "IoArray.proto";

package blox.Sequence;

message Comment { string text = 1; }

message Restart {}

message EnableDisable {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = EnablerInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 2 [ (nanopb).max_size = 16 ];
  }
}

message Wait {}

message WaitDuration {
  oneof duration {
    uint32 __raw__duration = 1
        [ (brewblox.field).unit = Second, (nanopb).int_size = IS_32 ];
    string __var__duration = 2 [ (nanopb).max_size = 16 ];
  }
}

message WaitUntil {
  oneof time {
    uint32 __raw__time = 1
        [ (brewblox.field).datetime = true, (nanopb).int_size = IS_32 ];
    string __var__time = 2 [ (nanopb).max_size = 16 ];
  }
}

message WaitTemperatureRange {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = TempSensorInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 4 [ (nanopb).max_size = 16 ];
  }

  oneof lower {
    sint32 __raw__lower = 2 [
      (brewblox.field).unit = Celsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];
    string __var__lower = 5 [ (nanopb).max_size = 16 ];
  }

  oneof upper {
    sint32 __raw__upper = 3 [
      (brewblox.field).unit = Celsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];
    string __var__upper = 6 [ (nanopb).max_size = 16 ];
  }
}

message WaitTemperatureBoundary {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = TempSensorInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 3 [ (nanopb).max_size = 16 ];
  }

  oneof value {
    sint32 __raw__value = 2 [
      (brewblox.field).unit = Celsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];
    string __var__value = 4 [ (nanopb).max_size = 16 ];
  }
}

message SetSetpoint {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = SetpointSensorPairInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 3 [ (nanopb).max_size = 16 ];
  }

  oneof setting {
    sint32 __raw__setting = 2 [
      (brewblox.field).unit = Celsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];
    string __var__setting = 4 [ (nanopb).max_size = 16 ];
  }
}

message WaitSetpoint {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = SetpointSensorPairInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 3 [ (nanopb).max_size = 16 ];
  }

  oneof precision {
    sint32 __raw__precision = 2 [
      (brewblox.field).unit = DeltaCelsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];
    string __var__precision = 4 [ (nanopb).max_size = 16 ];
  }
}

message SetDigital {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = ActuatorDigitalInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 3 [ (nanopb).max_size = 16 ];
  }

  oneof setting {
    IoArray.DigitalState __raw__setting = 2;
    string __var__setting = 4 [ (nanopb).max_size = 16 ];
  }
}

message WaitDigital {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = ActuatorDigitalInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 2 [ (nanopb).max_size = 16 ];
  }
}

message WaitDigitalState {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = DigitalInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 3 [ (nanopb).max_size = 16 ];
  }

  oneof state {
    IoArray.DigitalState __raw__state = 2;
    string __var__state = 4 [ (nanopb).max_size = 16 ];
  }
}

message SetPwm {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = ActuatorAnalogInterface,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 3 [ (nanopb).max_size = 16 ];
  }

  oneof setting {
    sint32 __raw__setting = 2
        [ (brewblox.field).scale = 4096, (nanopb).int_size = IS_32 ];
    string __var__setting = 4 [ (nanopb).max_size = 16 ];
  }
}

message TargetProfile {
  oneof target {
    uint32 __raw__target = 1 [
      (brewblox.field).objtype = SetpointProfile,
      (nanopb).int_size = IS_16
    ];
    string __var__target = 2 [ (nanopb).max_size = 16 ];
  }
}

message TargetSequence {
  oneof target {
    uint32 __raw__target = 1
        [ (brewblox.field).objtype = Sequence, (nanopb).int_size = IS_16 ];
    string __var__target = 2 [ (nanopb).max_size = 16 ];
  }
}

message Instruction {
  option (nanopb_msgopt).submsg_callback = true;

  oneof instruction {
    Restart RESTART = 1;
    EnableDisable ENABLE = 2;
    EnableDisable DISABLE = 3;
    Wait WAIT = 20;
    WaitDuration WAIT_DURATION = 4;
    WaitUntil WAIT_UNTIL = 5;
    WaitTemperatureRange WAIT_TEMP_BETWEEN = 6;
    WaitTemperatureRange WAIT_TEMP_NOT_BETWEEN = 7;
    WaitTemperatureRange WAIT_TEMP_UNEXPECTED = 8;
    WaitTemperatureBoundary WAIT_TEMP_ABOVE = 9;
    WaitTemperatureBoundary WAIT_TEMP_BELOW = 10;
    SetSetpoint SET_SETPOINT = 11;
    WaitSetpoint WAIT_SETPOINT = 12;
    WaitSetpoint WAIT_SETPOINT_ABOVE = 21;
    WaitSetpoint WAIT_SETPOINT_BELOW = 22;
    SetDigital SET_DIGITAL = 13;
    WaitDigital WAIT_DIGITAL = 14;
    WaitDigitalState WAIT_DIGITAL_EQUALS = 23;
    SetPwm SET_PWM = 15;
    TargetProfile START_PROFILE = 16;
    TargetProfile WAIT_PROFILE = 17;
    TargetSequence START_SEQUENCE = 18;
    TargetSequence WAIT_SEQUENCE = 19;

    // Special case: comment lines start with #
    Comment COMMENT = 200;
  }
}

enum SequenceStatus {
  UNKNOWN = 0;
  DISABLED = 1;
  PAUSED = 2;
  NEXT = 3;
  WAIT = 4;
  END = 5;
  RESTART = 6;
  ERROR = 7;
}

enum SequenceError {
  NONE = 0;
  INVALID_ARGUMENT = 1;
  INVALID_TARGET = 2;
  INACTIVE_TARGET = 3;
  DISABLED_TARGET = 4;
  SYSTEM_TIME_NOT_AVAILABLE = 5;
  VARIABLES_NOT_SUPPORTED = 6;
  UNDEFINED_VARIABLE = 7;
  INVALID_VARIABLE = 8;
}

enum SequenceStoreMode {
  AT_RESTORE_INSTRUCTION_RESTORE_ENABLED = 0;
  AT_RESTORE_INSTRUCTION_ALWAYS_ENABLED = 1;
  AT_RESTORE_INSTRUCTION_NEVER_ENABLED = 2;
  AT_FIRST_INSTRUCTION_RESTORE_ENABLED = 3;
  AT_FIRST_INSTRUCTION_ALWAYS_ENABLED = 4;
  AT_FIRST_INSTRUCTION_NEVER_ENABLED = 5;
}

message Block {
  option (brewblox.msg).objtype = Sequence;
  option (brewblox.msg).impl = EnablerInterface;

  bool enabled = 1 [ (brewblox.field).logged = true ];
  repeated Instruction instructions = 2;
  uint32 variablesId = 11
      [ (brewblox.field).objtype = Variables, (nanopb).int_size = IS_16 ];

  bool overrideState = 3;
  uint32 activeInstruction = 4
      [ (nanopb).int_size = IS_16, (brewblox.field).logged = true ];

  SequenceStoreMode storeMode = 12;

  SequenceStatus status = 8 [ (brewblox.field).readonly = true ];
  SequenceError error = 9 [ (brewblox.field).readonly = true ];

  uint32 elapsed = 10 [
    (nanopb).int_size = IS_32,
    (brewblox.field).readonly = true,
    (brewblox.field).logged = true,
    (brewblox.field).unit = Second,
    (brewblox.field).scale = 1000
  ];

  // Deprecated fields
  uint32 activeInstructionStartedAt = 5
      [ (brewblox.field).ignored = true, (nanopb).type = FT_IGNORE ];
  uint32 disabledAt = 6
      [ (brewblox.field).ignored = true, (nanopb).type = FT_IGNORE ];
  uint32 disabledDuration = 7
      [ (brewblox.field).ignored = true, (nanopb).type = FT_IGNORE ];
}
