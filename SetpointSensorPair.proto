syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";

package blox;

enum FilterChoice {
  FILTER_NONE = 0;
  FILTER_15s = 1;
  FILTER_45s = 2;
  FILTER_90s = 3;
  FILTER_3m = 4;
  FILTER_10m = 5;
  FILTER_30m = 6;
}

message SetpointSensorPair {
  option (brewblox_msg).objtype = SetpointSensorPair;
  option (brewblox_msg).impl = ProcessValueInterface;
  option (brewblox_msg).impl = SetpointSensorPairInterface;

  uint32 sensorId = 2
      [ (brewblox).objtype = TempSensorInterface, (nanopb).int_size = IS_16 ];

  sint32 setting = 5 [
    (brewblox).logged = true,
    (brewblox).unit = Temp,
    (brewblox).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox).readonly = true
  ];
  sint32 value = 6 [
    (brewblox).logged = true,
    (brewblox).unit = Temp,
    (brewblox).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox).readonly = true
  ];
  bool settingEnabled = 7;
  sint32 storedSetting = 8 [
    (brewblox).logged = false,
    (brewblox).unit = Temp,
    (brewblox).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  FilterChoice filter = 9;
  sint32 filterThreshold = 10 [
    (brewblox).unit = DeltaTemp,
    (brewblox).scale = 4096,
    (nanopb).int_size = IS_32
  ];

  sint32 valueUnfiltered = 11 [
    (brewblox).logged = true,
    (brewblox).unit = Temp,
    (brewblox).scale = 4096,
    (nanopb).int_size = IS_32,
    (brewblox).readonly = true
  ];
  bool resetFilter = 12;

  repeated uint32 strippedFields = 99 [
    (brewblox).readonly = true,
    (nanopb).int_size = IS_16,
    (nanopb).max_count = 3
  ];
}
