syntax = "proto3";
import "brewblox.proto";
import "nanopb.proto";
import "IoArray.proto";
package blox;

message ActuatorLogic {
  option (brewblox_msg).objtype = ActuatorLogic;

  enum DigitalCompareOp {
    VALUE_IS = 0;
    VALUE_ISNOT = 1;
    DESIRED_IS = 10;
    DESIRED_ISNOT = 11;
  };
  enum AnalogCompareOp {
    VALUE_LE = 0;
    VALUE_GE = 1;
    SETTING_LE = 10;
    SETTING_GE = 11;
  };
  enum Result {
    FALSE = 0;
    TRUE = 1;
    INVALID_DIGITAL_OP = 2;
    INVALID_ANALOG_OP = 3;
    BLOCK_NOT_FOUND = 4;
    INVALID_EXPRESSION = 5;
    INVALID_DIG_COMPARE_IDX = 6;
    INVALID_ANA_COMPARE_IDX = 7;
    UNEXPECTED_END = 8;
    UNEXPECTED_CLOSING_BRACKET = 9;
    MISSING_CLOSING_BRACKET = 10;
    UNEXPECTED_OPENING_BRACKET = 11;
    UNEXPECTED_CHARACTER = 12;
    EMPTY = 13;
  }

  message DigitalCompare {
    DigitalCompareOp op = 1;
    Result result = 2;
    uint32 id = 3 [
      (brewblox).objtype = ActuatorDigitalInterface,
      (nanopb).int_size = IS_16
    ];
    DigitalState rhs = 4;
  };
  message AnalogCompare {
    AnalogCompareOp op = 1;
    Result result = 2;
    uint32 id = 3 [
      (brewblox).objtype = ProcessValueInterface,
      (nanopb).int_size = IS_16
    ];
    sint32 rhs = 4 [ (brewblox).scale = 4096, (nanopb).int_size = IS_32 ];
  };
  uint32 targetId = 1 [
    (brewblox).objtype = ActuatorDigitalInterface,
    (nanopb).int_size = IS_16
  ];
  bool enabled = 2;
  Result result = 3 [ (brewblox).logged = true, (brewblox).readonly = true ];
  string expression = 4 [ (nanopb).max_length = 64 ];
  repeated DigitalCompare digital = 5 [ (nanopb).max_count = 16 ];
  repeated AnalogCompare analog = 6 [ (nanopb).max_count = 16 ];
  uint32 errorPos = 7 [ (nanopb).int_size = IS_8 ];
}