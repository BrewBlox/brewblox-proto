syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";
import "IoArray.proto";

package blox.Sequence;

message Restart {}

message EnableDisable {
  uint32 target = 1 [
    (brewblox.field).objtype = EnablerInterface,
    (nanopb).int_size = IS_16
  ];
}

message WaitDuration {
  uint32 duration = 1
      [ (brewblox.field).unit = Second, (nanopb).int_size = IS_32 ];
}

message WaitUntil {
  uint32 time = 1
      [ (brewblox.field).datetime = true, (nanopb).int_size = IS_32 ];
}

message WaitTemperature {
  uint32 target = 1 [
    (brewblox.field).objtype = TempSensorInterface,
    (nanopb).int_size = IS_16
  ];
  sint32 lower = 2 [
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
  sint32 upper = 3 [
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
}

message WaitTemperatureBoundary {
  uint32 target = 1 [
    (brewblox.field).objtype = TempSensorInterface,
    (nanopb).int_size = IS_16
  ];
  sint32 value = 2 [
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
}

message SetSetpoint {
  uint32 target = 1 [
    (brewblox.field).objtype = SetpointSensorPairInterface,
    (nanopb).int_size = IS_16
  ];
  sint32 setting = 2 [
    (brewblox.field).unit = Celsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
}

message WaitSetpoint {
  uint32 target = 1 [
    (brewblox.field).objtype = SetpointSensorPairInterface,
    (nanopb).int_size = IS_16
  ];
  sint32 precision = 2 [
    (brewblox.field).unit = DeltaCelsius,
    (brewblox.field).scale = 4096,
    (nanopb).int_size = IS_32
  ];
}

message SetDigital {
  uint32 target = 1 [
    (brewblox.field).objtype = ActuatorDigitalInterface,
    (nanopb).int_size = IS_16
  ];
  IoArray.DigitalState setting = 2;
}

message WaitDigital {
  uint32 target = 1 [
    (brewblox.field).objtype = ActuatorDigitalInterface,
    (nanopb).int_size = IS_16
  ];
}

message SetPwm {
  uint32 target = 1
      [ (brewblox.field).objtype = ActuatorPwm, (nanopb).int_size = IS_16 ];
  sint32 setting = 2
      [ (brewblox.field).scale = 4096, (nanopb).int_size = IS_32 ];
}

message WaitPwm {
  uint32 target = 1
      [ (brewblox.field).objtype = ActuatorPwm, (nanopb).int_size = IS_16 ];
  sint32 precision = 2
      [ (brewblox.field).scale = 4096, (nanopb).int_size = IS_32 ];
}

message StartWaitProfile {
  uint32 target = 1
      [ (brewblox.field).objtype = SetpointProfile, (nanopb).int_size = IS_16 ];
}

message StartWaitSequence {
  uint32 target = 1
      [ (brewblox.field).objtype = Sequence, (nanopb).int_size = IS_16 ];
}

message Instruction {
  oneof instruction_oneof {
    Restart RESTART = 1;
    EnableDisable ENABLE = 2;
    EnableDisable DISABLE = 3;
    WaitDuration WAIT_DURATION = 4;
    WaitUntil WAIT_UNTIL = 5;
    WaitTemperature WAIT_TEMPERATURE_BETWEEN = 6;
    WaitTemperatureBoundary WAIT_TEMPERATURE_ABOVE = 7;
    WaitTemperatureBoundary WAIT_TEMPERATURE_BELOW = 8;
    SetSetpoint SET_SETPOINT = 9;
    WaitSetpoint WAIT_SETPOINT = 10;
    SetDigital SET_DIGITAL = 11;
    WaitDigital WAIT_DIGITAL = 12;
    SetPwm SET_PWM = 13;
    WaitPwm WAIT_PWM = 14;
    StartWaitProfile START_PROFILE = 15;
    StartWaitProfile WAIT_PROFILE = 16;
    StartWaitSequence START_SEQUENCE = 17;
    StartWaitSequence WAIT_SEQUENCE = 18;
  }
}

enum SequenceStatus {
  UNKNOWN = 0;
  DISABLED = 1;
  PAUSED = 2;
  ACTIVE = 3;
  WAITING = 4;
  DONE = 5;
  RESTART = 6;
  ERROR = 7;
}

enum SequenceError {
  NONE = 0;
  INVALID_ARGUMENT = 1;
  INVALID_TARGET = 2;
  INVALID_TARGET_TYPE = 3;
  DISABLED_TARGET = 4;
  SYSTEM_TIME_NOT_AVAILABLE = 5;
}

message InstructionReset {
  uint32 activeInstruction = 1 [ (nanopb).int_size = IS_16 ];
  uint32 activeInstructionStartedAt = 2 [ (nanopb).int_size = IS_32 ];
}

message Block {
  option (brewblox.msg).objtype = Sequence;
  option (brewblox.msg).impl = EnablerInterface;

  bool enabled = 1 [ (brewblox.field).logged = true ];
  repeated Instruction instructions = 2;

  oneof reset_oneof { InstructionReset reset = 3; }

  uint32 activeInstruction = 4 [
    (nanopb).int_size = IS_16,
    (brewblox.field).logged = true,
    (brewblox.field).readonly = true
  ];
  uint32 activeInstructionStartedAt = 5 [
    (nanopb).int_size = IS_32,
    (brewblox.field).datetime = true,
    (brewblox.field).readonly = true,
    (brewblox.field).logged = true
  ];
  uint32 disabledAt = 6 [
    (nanopb).int_size = IS_32,
    (brewblox.field).datetime = true,
    (brewblox.field).readonly = true
  ];
  uint32 disabledDuration = 7 [
    (nanopb).int_size = IS_32,
    (brewblox.field).unit = Second,
    (brewblox.field).readonly = true
  ];

  SequenceStatus status = 8 [ (brewblox.field).readonly = true ];
  SequenceError error = 9 [ (brewblox.field).readonly = true ];
}
