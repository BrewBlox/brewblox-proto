syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";
import "IoArray.proto";

package blox.Stepper;

enum Instruction {
  NOOP = 0;
  RESTART = 1;

  TIME_WAIT_DURATION = 2; // timeValue
  TIME_WAIT_ABSOLUTE = 3; // timeValue

  PROFILE_ENABLE = 10; // profileId, booleanValue
  PROFILE_RESET = 11;  // profileId
  PROFILE_WAIT = 12;   // profileId

  SETPOINT_ENABLE = 20;  // setpointId, booleanValue
  SETPOINT_SETTING = 21; // setpointId, setpointValue
  SETPOINT_WAIT = 22;    // setpointId, setpointOffsetValue

  DIGITAL_ENABLE = 30;  // digitalId, booleanValue
  DIGITAL_SETTING = 31; // digitalId, digitalValue
  DIGITAL_WAIT = 32;    // digitalId

  ANALOG_ENABLE = 40;  // analogId, booleanValue
  ANALOG_SETTING = 41; // analogId, analogValue
  ANALOG_WAIT = 42;    // analogId, analogValue
}

message Step {
  Instruction instruction = 1;

  oneof target_oneof {
    uint32 setpointId = 2 [
      (brewblox.field).objtype = SetpointSensorPairInterface,
      (nanopb).int_size = IS_16
    ];

    uint32 digitalId = 3 [
      (brewblox.field).objtype = ActuatorDigitalInterface,
      (nanopb).int_size = IS_16
    ];

    uint32 analogId = 4 [
      (brewblox.field).objtype = ActuatorAnalogInterface,
      (nanopb).int_size = IS_16
    ];

    uint32 profileId = 5 [
      (brewblox.field).objtype = SetpointProfile,
      (nanopb).int_size = IS_16
    ];
  }

  oneof value_oneof {
    bool booleanValue = 10 [ (brewblox.field).logged = true ];

    uint32 timeValue = 11
        [ (brewblox.field).logged = true, (nanopb).int_size = IS_32 ];

    sint32 setpointValue = 12 [
      (brewblox.field).logged = true,
      (brewblox.field).unit = Celsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];

    sint32 setpointOffsetValue = 13 [
      (brewblox.field).logged = true,
      (brewblox.field).unit = DeltaCelsius,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];

    IoArray.DigitalState digitalValue = 14 [ (brewblox.field).logged = true ];

    sint32 analogValue = 15 [
      (brewblox.field).logged = true,
      (brewblox.field).scale = 4096,
      (nanopb).int_size = IS_32
    ];
  }
}

message Block {
  option (brewblox.msg).objtype = Stepper;

  bool enabled = 1 [ (brewblox.field).logged = true ];
  uint32 activeStep = 2
      [ (brewblox.field).logged = true, (nanopb).int_size = IS_16 ];
  uint32 activeStepStartedAt = 3 [ (brewblox.field).logged = true ];
  repeated Step steps = 4;
}
